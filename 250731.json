[{"bookSourceComment": "YX源仓库：http://yx.ccute.xyz/\n\n//by: 游客、Yolo", "bookSourceName": "🎨漫画客", "bookSourceType": 2, "bookSourceUrl": "https://m.yumanhua.com/", "bookUrlPattern": "https?://m.yumanhua.com/\\w+/", "customOrder": -1, "enabled": true, "enabledCookieJar": true, "enabledExplore": true, "exploreUrl": "@js:\nvar kind = [\"冒险\",\"热血\",\"都市\",\n\"玄幻\",\"悬疑\",\"耽美\",\"恋爱\",\"生活\",\n\"搞笑\",\"穿越\",\"修真\",\"后宫\",\"女主\",\n\"古风\",\"连载\",\"完结\"];\nlet bu = \"/data/sort,\"\nbd = {\n  \"body\": \"s=1&p={{page}}\",\n  \"headers\": {\n    \"Referer\": \"{{baseUrl}}/\",\n    \"X-Requested-With\": \"XMLHttpRequest\"\n  },\n  \"method\": \"POST\"\n};\n\nsort = kind.map((name, index) => {\n\tindex++; let  i = index,\n\turl = `s=${i}&p={{page}}`,\n\ttitle = name; bd.body = url;\n\tlink = bu + JSON.stringify(bd);\n\tlist = ({\n    \"title\": title,\n    \"url\": link,\n    \"style\": {\n      \"layout_flexGrow\": 1,\n      \"layout_flexBasisPercent\": 0.25,\n    }\n  });\n\treturn list\n\t});\n\t\nJSON.stringify(sort);", "header": "{\"User-Agent\": \"Mozilla/5.0 (Linux; Android 9; MIX 2 Build/PKQ1.190118.001; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/80.0.3987.99 Mobile Safari/537.36\"}", "lastUpdateTime": 1753892551589, "respondTime": 299151, "ruleBookInfo": {"author": "@get:{a}", "coverUrl": "@get:{c}", "init": "@put:{n:\"[property$=title]@content\",\na:\"[property$=author]@content\",\nk:\".comic-tags@span@text&&\n.comic-info-detail > p.0@text\",\nl:\"[property~=las?test_chapter_name]@content\",\ni:\".cartoon-introduction@text\",\nc:\"[property$=image]@content\"}", "intro": "@get:{i}", "kind": "@get:{k}##更新：", "lastChapter": "@get:{l}", "name": "@get:{n}"}, "ruleContent": {"content": "<js>\nfunction atob(data) {\n\tvar base = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\tvar a, b, c, d, e, f, g, h, i = 0x0, j = 0x0, k = '', l = [];\n\tif (!data) {\n\t\treturn data;\n\t}\n\tdata += '';\n\tdo {\n\t\td = base.indexOf(data.charAt(i++));\n\t\te = base.indexOf(data.charAt(i++));\n\t\tf = base.indexOf(data.charAt(i++));\n\t\tg = base.indexOf(data.charAt(i++));\n\t\th = (((d << 18) | (e << 12)) | (f << 6)) | g;\n\t\ta = (h >> 16) & 255;\n\t\tb = (h >> 8) & 255;\n\t\tc = h & 255;\n\t\tif (f == 64) {\n\t\t\tl[j++] = String['fromCharCode'](a);\n\t\t} else if (g == 64) {\n  l[j++] = String['fromCharCode'](a, b);\n  } else {\n    l[j++] = String['fromCharCode'](a, b, c);\n  }\n } while (i < data.length);\n k = l.join('');\n return k;\n}\ntry{\n eval(result.match(/(eval\\([\\s\\S]+?)<\\/script/)[1]);\n data = atob(__c0rst96); \n k = java.getString('.readerContainer@data-id');\n\tkey = [\"c21raHkyNTg=\",\"c21rZDk1ZnY=\",\"bWQ0OTY5NTI=\",\"Y2Rjc2R3cQ==\",\"dmJmc2EyNTY=\",\"Y2F3ZjE1MWM=\",\"Y2Q1NmN2ZGE=\",\"OGtpaG50OQ==\",\"ZHNvMTV0bG8=\",\"NWtvNnBsaHk=\"][k];\n\tkey = atob(key);\n\tlen = key.length;\n  imgs = '';\n  for (i = 0; i < data.length; i++) {\n\t  k = i % len;\n\t  a = data.charCodeAt(i);\n\t  b = key.charCodeAt(k);\n\t \t imgs += String.fromCharCode(a^ b);\n   }\n   eval(atob(imgs)).map(a=>\r\n'<img src=\"'+a+'\">').join(\"\\n\")\n}catch(e){}\n</js>"}, "ruleExplore": {}, "ruleSearch": {"author": "$.author", "bookList": "$.data[*]", "bookUrl": "/{{$.id}}/", "coverUrl": "$.imgurl", "intro": "$.intro", "kind": "0", "lastChapter": "$.remarks", "name": "$.name"}, "ruleToc": {"chapterList": ".chaplist-box li a\n@js:\nvar list = Array.from(result)\ntry{\n var regex = /(\\w+)\\/$/,\n id = baseUrl.match(regex)[1];\n url = baseUrl.replace(regex, \"morechapter\");\n\tp = java.post(url, `id=${id}`, \n\t{Referer: baseUrl}).body();\n\td = JSON.parse(p).data;\ndir = d.map($ => ({text: $.chaptername,\n\thref: baseUrl + $.chapterid+\".html\"}) );\n\t}catch(e){\n\t\tjava.log(e)\n\t\tdir = [];\n\t\t}\nlist.concat(dir).reverse()", "chapterName": "text", "chapterUrl": "href##$##,{'webView': true}"}, "searchUrl": "/s,{\n  \"body\": \"k={{key}}\",\n  \"headers\": {\n    \"Referer\": \"{{baseUrl}}/\",\n    \"X-Requested-With\": \"XMLHttpRequest\"\n  },\n  \"method\": \"POST\"\n}", "weight": 0}]
